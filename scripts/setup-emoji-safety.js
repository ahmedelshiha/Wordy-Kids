#!/usr/bin/env node

/**
 * PHASE 5: Setup Script for Git Emoji Safety Configuration
 * Configures Git and installs pre-commit hooks for emoji handling
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Colors for console output
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(color, message) {
  console.log(color + message + colors.reset);
}

function execCommand(command, description) {
  try {
    log(colors.blue, `üîß ${description}...`);
    execSync(command, { stdio: 'inherit' });
    log(colors.green, `‚úÖ ${description} completed`);
    return true;
  } catch (error) {
    log(colors.red, `‚ùå ${description} failed: ${error.message}`);
    return false;
  }
}

function createGitHooksDir() {
  const hooksDir = '.git/hooks';
  
  if (!fs.existsSync('.git')) {
    log(colors.red, '‚ùå Not a Git repository. Run git init first.');
    return false;
  }
  
  if (!fs.existsSync(hooksDir)) {
    fs.mkdirSync(hooksDir, { recursive: true });
    log(colors.green, '‚úÖ Created .git/hooks directory');
  }
  
  return true;
}

function installPreCommitHook() {
  const hookPath = '.git/hooks/pre-commit';
  const scriptPath = 'scripts/pre-commit-emoji-check.js';
  
  if (!fs.existsSync(scriptPath)) {
    log(colors.red, `‚ùå Pre-commit script not found: ${scriptPath}`);
    return false;
  }
  
  const hookContent = `#!/bin/sh
# Pre-commit hook for emoji corruption detection
# Generated by setup-emoji-safety.js

node scripts/pre-commit-emoji-check.js
exit $?
`;
  
  try {
    fs.writeFileSync(hookPath, hookContent, { mode: 0o755 });
    log(colors.green, '‚úÖ Installed pre-commit hook');
    return true;
  } catch (error) {
    log(colors.red, `‚ùå Failed to install pre-commit hook: ${error.message}`);
    return false;
  }
}

function configureGitSettings() {
  const gitConfigs = [
    {
      command: 'git config core.quotepath false',
      description: 'Configure Git to handle UTF-8 paths properly'
    },
    {
      command: 'git config core.precomposeunicode true',
      description: 'Enable Unicode precomposition (important for emojis)'
    },
    {
      command: 'git config core.autocrlf false',
      description: 'Disable CRLF conversion (use .gitattributes instead)'
    },
    {
      command: 'git config core.safecrlf warn',
      description: 'Warn about mixed line endings'
    }
  ];
  
  let allSuccess = true;
  
  gitConfigs.forEach(config => {
    const success = execCommand(config.command, config.description);
    if (!success) allSuccess = false;
  });
  
  return allSuccess;
}

function verifyEmojiFiles() {
  const criticalFiles = [
    'client/lib/emojiUtils.ts',
    'client/components/EmojiText.tsx',
    '.editorconfig',
    '.gitattributes'
  ];
  
  let allExist = true;
  
  log(colors.blue, 'üîç Verifying emoji-related files...');
  
  criticalFiles.forEach(file => {
    if (fs.existsSync(file)) {
      log(colors.green, `‚úÖ ${file}`);
    } else {
      log(colors.red, `‚ùå ${file} (missing)`);
      allExist = false;
    }
  });
  
  return allExist;
}

function checkNodeVersion() {
  try {
    const nodeVersion = process.version;
    const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0]);
    
    if (majorVersion >= 14) {
      log(colors.green, `‚úÖ Node.js ${nodeVersion} (compatible)`);
      return true;
    } else {
      log(colors.red, `‚ùå Node.js ${nodeVersion} (requires >= 14.0.0)`);
      return false;
    }
  } catch (error) {
    log(colors.red, `‚ùå Could not check Node.js version: ${error.message}`);
    return false;
  }
}

function runEmojiTest() {
  const testScript = 'scripts/scan-emojis.js';
  
  if (!fs.existsSync(testScript)) {
    log(colors.yellow, '‚ö†Ô∏è  Emoji scan script not found, skipping test');
    return true;
  }
  
  try {
    log(colors.blue, 'üß™ Running emoji corruption scan...');
    execSync(`node ${testScript}`, { stdio: 'inherit' });
    log(colors.green, '‚úÖ Emoji scan completed');
    return true;
  } catch (error) {
    log(colors.yellow, '‚ö†Ô∏è  Emoji scan completed with warnings');
    return true; // Don't fail setup for scan warnings
  }
}

function createDevelopmentGuide() {
  const guidePath = 'docs/DEVELOPMENT_SETUP.md';
  
  if (fs.existsSync(guidePath)) {
    log(colors.blue, 'üìù Development guide already exists');
    return true;
  }
  
  const guideContent = `# Development Setup for Emoji Safety

This guide was automatically generated by the emoji safety setup script.

## Prerequisites

- Node.js >= 14.0.0
- Git configured for UTF-8 handling

## Emoji Handling

### Pre-commit Hooks

The repository is configured with pre-commit hooks that:
- Check for emoji corruption
- Validate Unicode encoding
- Ensure emoji utilities integrity

### Manual Testing

Visit \`/emoji-test\` page during development to verify emoji functionality.

### Key Commands

\`\`\`bash
# Run emoji corruption scan
npm run lint:emojis

# Run emoji tests
npm test -- emojiUtils.test.ts

# Check pre-commit hook manually
node scripts/pre-commit-emoji-check.js
\`\`\`

### Troubleshooting

If you encounter emoji issues:

1. Check file encoding (should be UTF-8)
2. Verify Git configuration
3. Run the emoji test page
4. Review the emoji handling guide

For more details, see [Emoji Handling Guide](./EMOJI_HANDLING_GUIDE.md).
`;

  try {
    fs.writeFileSync(guidePath, guideContent);
    log(colors.green, '‚úÖ Created development setup guide');
    return true;
  } catch (error) {
    log(colors.yellow, `‚ö†Ô∏è  Could not create development guide: ${error.message}`);
    return true; // Don't fail for this
  }
}

function main() {
  console.log('');
  log(colors.blue + colors.bold, 'üöÄ Emoji Safety Setup for Wordy Kids');
  log(colors.blue, 'Configuring Git and development environment for proper emoji handling');
  console.log('');
  
  let allStepsSuccessful = true;
  
  // Step 1: Check Node.js version
  log(colors.blue + colors.bold, 'üìã Step 1: Environment Check');
  if (!checkNodeVersion()) {
    allStepsSuccessful = false;
  }
  console.log('');
  
  // Step 2: Verify critical files
  log(colors.blue + colors.bold, 'üìã Step 2: File Verification');
  if (!verifyEmojiFiles()) {
    log(colors.red, '‚ùå Some critical emoji files are missing');
    log(colors.yellow, 'üí° Make sure all emoji-related files have been created');
    allStepsSuccessful = false;
  }
  console.log('');
  
  // Step 3: Configure Git
  log(colors.blue + colors.bold, 'üìã Step 3: Git Configuration');
  if (!configureGitSettings()) {
    log(colors.red, '‚ùå Git configuration failed');
    allStepsSuccessful = false;
  }
  console.log('');
  
  // Step 4: Install pre-commit hooks
  log(colors.blue + colors.bold, 'üìã Step 4: Pre-commit Hooks');
  if (!createGitHooksDir() || !installPreCommitHook()) {
    log(colors.red, '‚ùå Pre-commit hook installation failed');
    allStepsSuccessful = false;
  }
  console.log('');
  
  // Step 5: Run emoji test
  log(colors.blue + colors.bold, 'üìã Step 5: Emoji Test');
  runEmojiTest();
  console.log('');
  
  // Step 6: Create development guide
  log(colors.blue + colors.bold, 'üìã Step 6: Documentation');
  createDevelopmentGuide();
  console.log('');
  
  // Summary
  if (allStepsSuccessful) {
    log(colors.green + colors.bold, 'üéâ Emoji Safety Setup Complete!');
    console.log('');
    log(colors.green, 'Your repository is now configured for proper emoji handling:');
    log(colors.green, '‚úÖ Git configured for UTF-8 and Unicode');
    log(colors.green, '‚úÖ Pre-commit hooks installed');
    log(colors.green, '‚úÖ File encoding settings applied');
    log(colors.green, '‚úÖ Development documentation created');
    console.log('');
    log(colors.blue, 'üí° Next steps:');
    log(colors.blue, '   ‚Ä¢ Test emoji functionality at /emoji-test');
    log(colors.blue, '   ‚Ä¢ Review docs/EMOJI_HANDLING_GUIDE.md');
    log(colors.blue, '   ‚Ä¢ Run npm test to verify everything works');
    console.log('');
    log(colors.blue, 'üîí The pre-commit hook will now automatically check for emoji corruption.');
    
    return 0;
  } else {
    log(colors.red + colors.bold, '‚ùå Setup encountered errors');
    console.log('');
    log(colors.red, 'Some steps failed during setup. Please review the errors above.');
    log(colors.yellow, 'You may need to manually complete some configuration steps.');
    console.log('');
    log(colors.blue, 'üìñ For manual setup instructions, see:');
    log(colors.blue, '   docs/EMOJI_HANDLING_GUIDE.md');
    
    return 1;
  }
}

// Run setup if called directly
if (require.main === module) {
  process.exit(main());
}

module.exports = {
  configureGitSettings,
  installPreCommitHook,
  verifyEmojiFiles,
  checkNodeVersion,
  createGitHooksDir
};
